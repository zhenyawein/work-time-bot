import os
import logging
from datetime import datetime, date, timedelta
from typing import Dict, Tuple, List
from telegram import (
    Update,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler,
    CallbackQueryHandler,
)
from database import Database

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è Railway
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")

if not BOT_TOKEN:
    logging.error("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞ Railway.")
    exit(1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database()

import os
import logging
from datetime import datetime, date, timedelta
from typing import Dict, Tuple, List
from telegram import (
    Update,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler,
    CallbackQueryHandler,
)
from dotenv import load_dotenv
from database import Database

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)

BOT_TOKEN = os.getenv("BOT_TOKEN")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞—Ç
user_selections = {}


def format_date(date_str: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç DD.MM.YYYY"""
    try:
        d = datetime.strptime(date_str, "%Y-%m-%d")
        return d.strftime("%d.%m.%Y")
    except ValueError:
        return date_str


def calculate_work_hours(start_time: str, end_time: str) -> Tuple[float, float]:
    """–†–∞—Å—á–µ—Ç —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–æ–≤: —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ –∏ —Å —É—á–µ—Ç–æ–º –æ–±–µ–¥–∞"""
    try:
        start = datetime.strptime(start_time, "%H:%M")
        end = datetime.strptime(end_time, "%H:%M")

        # –†–∞—Å—á–µ—Ç —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö —á–∞—Å–æ–≤
        actual_hours = (end - start).total_seconds() / 3600

        # –†–∞—Å—á–µ—Ç —á–∞—Å–æ–≤ —Å —É—á–µ—Ç–æ–º –æ–±–µ–¥–∞ (–º–∏–Ω—É—Å 1 —á–∞—Å)
        work_hours_with_lunch = actual_hours - 1.0

        return max(0, actual_hours), max(0, work_hours_with_lunch)
    except ValueError:
        return 0, 0


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    user = update.message.from_user
    welcome_text = f"""
üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!

–Ø –±–æ—Ç –¥–ª—è —É—á–µ—Ç–∞ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π.

üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã
/add_action - –î–æ–±–∞–≤–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
/report - –í—ã–≥—Ä—É–∑–∏—Ç—å –æ—Ç—á–µ—Ç –∑–∞ –ø–µ—Ä–∏–æ–¥
/today - –ü–æ–∫–∞–∑–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å
/reset_today - –°–±—Ä–æ—Å–∏—Ç—å —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)

üéØ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É—á–µ—Ç–∞ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏!
    """

    keyboard = [
        [
            KeyboardButton("üü¢ –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è"),
            KeyboardButton("üî¥ –ö–æ–Ω–µ—Ü —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è"),
        ],
        [KeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ"), KeyboardButton("üìä –û—Ç—á–µ—Ç")],
        [KeyboardButton("üìÖ –°–µ–≥–æ–¥–Ω—è")],
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    await update.message.reply_text(welcome_text, reply_markup=reply_markup)


async def start_work_day(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è"""
    user_id = update.message.from_user.id
    today = date.today().isoformat()
    today_formatted = format_date(today)
    current_time = datetime.now().strftime("%H:%M")

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–Ω—è
    work_day = db.get_work_day(user_id, today)

    if work_day and work_day["start_time"]:
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–µ–µ
        keyboard = [
            [
                InlineKeyboardButton(
                    "‚úÖ –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –≤—Ä–µ–º—è",
                    callback_data=f"overwrite_start_{current_time}",
                )
            ],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_overwrite")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            f"‚è∞ –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è —É–∂–µ –±—ã–ª–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {work_day['start_time']}\n"
            f"–•–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –Ω–∞ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è ({current_time})?",
            reply_markup=reply_markup,
        )
    else:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞, –∫–æ–Ω–µ—Ü –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–º
        db.add_work_day(user_id, today, current_time, "")

        await update.message.reply_text(
            f"üü¢ –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!\n"
            f"üìÖ –î–∞—Ç–∞: {today_formatted}\n"
            f"üïê –í—Ä–µ–º—è: {current_time}\n"
            f"–•–æ—Ä–æ—à–µ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è! üíº"
        )


async def end_work_day(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è"""
    user_id = update.message.from_user.id
    today = date.today().isoformat()
    today_formatted = format_date(today)
    current_time = datetime.now().strftime("%H:%M")

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–Ω—è
    work_day = db.get_work_day(user_id, today)

    if not work_day or not work_day["start_time"]:
        await update.message.reply_text(
            "‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è!\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üü¢ –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è'"
        )
        return

    if work_day["end_time"]:
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–µ–µ
        keyboard = [
            [
                InlineKeyboardButton(
                    "‚úÖ –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –≤—Ä–µ–º—è",
                    callback_data=f"overwrite_end_{current_time}",
                )
            ],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_overwrite")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            f"‚è∞ –ö–æ–Ω–µ—Ü —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è —É–∂–µ –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {work_day['end_time']}\n"
            f"–•–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –Ω–∞ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è ({current_time})?",
            reply_markup=reply_markup,
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è (–Ω–∞—á–∞–ª–æ –±–µ—Ä–µ–º –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö)
    db.add_work_day(user_id, today, work_day["start_time"], current_time)

    # –†–∞—Å—á–µ—Ç —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–æ–≤
    actual_hours, work_hours_with_lunch = calculate_work_hours(
        work_day["start_time"], current_time
    )

    await update.message.reply_text(
        f"üî¥ –ö–æ–Ω–µ—Ü —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!\n"
        f"üìÖ –î–∞—Ç–∞: {today_formatted}\n"
        f"üïê –ù–∞—á–∞–ª–æ: {work_day['start_time']}\n"
        f"üïî –ö–æ–Ω–µ—Ü: {current_time}\n"
        f"‚è± –§–∞–∫—Ç–∏—á–µ—Å–∫–∏ –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ: {actual_hours:.1f} —á–∞—Å–æ–≤\n"
        f"üçΩ –° —É—á–µ—Ç–æ–º –æ–±–µ–¥–∞: {work_hours_with_lunch:.1f} —á–∞—Å–æ–≤\n"
        f"–•–æ—Ä–æ—à–µ–≥–æ –æ—Ç–¥—ã—Ö–∞! üåô"
    )


async def reset_today(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–±—Ä–æ—Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    user_id = update.message.from_user.id
    today = date.today().isoformat()
    today_formatted = format_date(today)

    # –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    import sqlite3

    conn = sqlite3.connect("work_tracker.db")
    cursor = conn.cursor()
    cursor.execute(
        "DELETE FROM work_days WHERE user_id = ? AND date = ?", (user_id, today)
    )
    cursor.execute(
        "DELETE FROM work_actions WHERE user_id = ? AND date = ?", (user_id, today)
    )
    conn.commit()
    conn.close()

    await update.message.reply_text(
        f"üîÑ –î–∞–Ω–Ω—ã–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è ({today_formatted}) —Å–±—Ä–æ—à–µ–Ω—ã!\n"
        f"–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–Ω–æ–≤–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è."
    )


async def handle_overwrite_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏ –≤—Ä–µ–º–µ–Ω–∏"""
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    today = date.today().isoformat()
    today_formatted = format_date(today)
    callback_data = query.data

    if callback_data == "cancel_overwrite":
        await query.edit_message_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return

    elif callback_data.startswith("overwrite_start_"):
        current_time = callback_data.replace("overwrite_start_", "")
        # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ (–∫–æ–Ω–µ—Ü –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–º)
        work_day = db.get_work_day(user_id, today)
        db.add_work_day(user_id, today, current_time, "")

        await query.edit_message_text(
            f"‚úÖ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω–æ!\n"
            f"üìÖ –î–∞—Ç–∞: {today_formatted}\n"
            f"üïê –ù–æ–≤–æ–µ –≤—Ä–µ–º—è: {current_time}"
        )

    elif callback_data.startswith("overwrite_end_"):
        current_time = callback_data.replace("overwrite_end_", "")
        # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è
        work_day = db.get_work_day(user_id, today)
        if work_day and work_day["start_time"]:
            db.add_work_day(user_id, today, work_day["start_time"], current_time)

            # –†–∞—Å—á–µ—Ç —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–æ–≤
            actual_hours, work_hours_with_lunch = calculate_work_hours(
                work_day["start_time"], current_time
            )

            await query.edit_message_text(
                f"‚úÖ –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω–æ!\n"
                f"üìÖ –î–∞—Ç–∞: {today_formatted}\n"
                f"üïê –ù–∞—á–∞–ª–æ: {work_day['start_time']}\n"
                f"üïî –ö–æ–Ω–µ—Ü: {current_time}\n"
                f"‚è± –§–∞–∫—Ç–∏—á–µ—Å–∫–∏ –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ: {actual_hours:.1f} —á–∞—Å–æ–≤\n"
                f"üçΩ –° —É—á–µ—Ç–æ–º –æ–±–µ–¥–∞: {work_hours_with_lunch:.1f} —á–∞—Å–æ–≤"
            )


# ============================
# –ü–†–û–°–¢–û–ï –î–û–ë–ê–í–õ–ï–ù–ò–ï –î–ï–ô–°–¢–í–ò–ô
# ============================


async def add_action_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"""
    await update.message.reply_text(
        "üìù *–û–ø–∏—à–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:*\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
        "‚Ä¢ '–ú–æ–Ω—Ç–∞–∂ —ç–ª–µ–∫—Ç—Ä–æ–ø—Ä–æ–≤–æ–¥–∫–∏ –≤ –∫–≤–∞—Ä—Ç–∏—Ä–µ'\n"
        "‚Ä¢ '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–æ–∑–µ—Ç–æ–∫ –∏ –≤—ã–∫–ª—é—á–∞—Ç–µ–ª–µ–π'\n"
        "‚Ä¢ '–ü—Ä–æ–∫–ª–∞–¥–∫–∞ –∫–∞–±–µ–ª—è –í–í–ì–Ω–≥ 3x2.5'\n"
        "‚Ä¢ '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —â–∏—Ç–∫–∞ –æ—Å–≤–µ—â–µ–Ω–∏—è'\n"
        "‚Ä¢ '–ó–∞–º–µ–Ω–∞ —ç–ª–µ–∫—Ç—Ä–æ–ø—Ä–æ–≤–æ–¥–∫–∏ –Ω–∞ –∫—É—Ö–Ω–µ'",
        parse_mode="Markdown",
    )


async def add_action_complete(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è (–æ–±—Ä–∞–±–æ—Ç–∫–∞ –ª—é–±–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è)"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –∫–æ–º–∞–Ω–¥–∞ –∏ –Ω–µ –∫–Ω–æ–ø–∫–∞
    if update.message.text.startswith("/"):
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –¥—Ä—É–≥–∏–µ –∫–Ω–æ–ø–∫–∏
    button_texts = [
        "üü¢ –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è",
        "üî¥ –ö–æ–Ω–µ—Ü —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è",
        "üìù –î–æ–±–∞–≤–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ",
        "üìä –û—Ç—á–µ—Ç",
        "üìÖ –°–µ–≥–æ–¥–Ω—è",
    ]
    if update.message.text in button_texts:
        return

    action_description = update.message.text
    user_id = update.message.from_user.id
    today = date.today().isoformat()
    today_formatted = format_date(today)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    db.add_work_task(user_id, today, action_description)

    await update.message.reply_text(
        f"‚úÖ *–í—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!*\n\n"
        f"üìÖ *–î–∞—Ç–∞:* {today_formatted}\n"
        f"üìù *–î–µ–π—Å—Ç–≤–∏–µ:* {action_description}",
        parse_mode="Markdown",
    )


# ============================
# –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –°–ï–ì–û–î–ù–Ø–®–ù–ï–ú –î–ù–ï
# ============================


async def today_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–º –¥–Ω–µ"""
    user_id = update.message.from_user.id
    today = date.today().isoformat()
    today_formatted = format_date(today)

    work_day = db.get_work_day(user_id, today)
    actions = db.get_work_tasks(user_id, today)

    response = [f"üìÖ *–°–µ–≥–æ–¥–Ω—è:* {today_formatted}"]

    if work_day:
        if work_day["start_time"]:
            response.append(f"üü¢ *–ù–∞—á–∞–ª–æ:* {work_day['start_time']}")
        else:
            response.append("‚ùå –ù–∞—á–∞–ª–æ –¥–Ω—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

        if work_day["end_time"] and work_day["end_time"] != work_day["start_time"]:
            response.append(f"üî¥ *–ö–æ–Ω–µ—Ü:* {work_day['end_time']}")
            actual_hours, work_hours_with_lunch = calculate_work_hours(
                work_day["start_time"], work_day["end_time"]
            )
            response.append(f"‚è± *–§–∞–∫—Ç–∏—á–µ—Å–∫–∏:* {actual_hours:.1f} —á–∞—Å–æ–≤")
            response.append(f"üçΩ *–° —É—á–µ—Ç–æ–º –æ–±–µ–¥–∞:* {work_hours_with_lunch:.1f} —á–∞—Å–æ–≤")
        else:
            response.append("‚ùå –ö–æ–Ω–µ—Ü –¥–Ω—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    else:
        response.append("‚ùå –†–∞–±–æ—á–∏–π –¥–µ–Ω—å –Ω–µ –Ω–∞—á–∞—Ç")

    if actions:
        response.append("\n‚úÖ *–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:*")
        for i, action in enumerate(actions, 1):
            response.append(f"  {i}. {action}")
    else:
        response.append("\n‚ùå –î–µ–π—Å—Ç–≤–∏—è –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã")

    await update.message.reply_text("\n".join(response), parse_mode="Markdown")


# ============================
# –£–ü–†–û–©–ï–ù–ù–´–ô –í–´–ë–û–† –î–ê–¢–´ –î–õ–Ø –û–¢–ß–ï–¢–ê
# ============================


async def report_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞"""
    user_id = update.message.from_user.id

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_selections[user_id] = {
        "start_date": None,
        "end_date": date.today().isoformat(),  # –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –≤—Å–µ–≥–¥–∞ —Å–µ–≥–æ–¥–Ω—è
    }

    await show_year_selection(update, "start")


async def show_year_selection(update, date_type: str):
    """–ü–æ–∫–∞–∑ –≤—ã–±–æ—Ä–∞ –≥–æ–¥–∞"""
    current_year = datetime.now().year

    keyboard = []
    row = []
    for year in range(current_year - 1, current_year + 2):  # -1, —Ç–µ–∫—É—â–∏–π, +1
        row.append(
            InlineKeyboardButton(str(year), callback_data=f"year_{year}_{date_type}")
        )
        if len(row) == 3:
            keyboard.append(row)
            row = []
    if row:
        keyboard.append(row)

    keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="report_cancel")])

    reply_markup = InlineKeyboardMarkup(keyboard)

    if isinstance(update, Update):
        await update.message.reply_text(
            "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥ –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–π –¥–∞—Ç—ã –æ—Ç—á–µ—Ç–∞:", reply_markup=reply_markup
        )
    else:
        # –≠—Ç–æ callback query
        await update.edit_message_text(
            "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥ –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–π –¥–∞—Ç—ã –æ—Ç—á–µ—Ç–∞:", reply_markup=reply_markup
        )


async def handle_report_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –æ—Ç inline –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    callback_data = query.data

    if callback_data == "report_cancel":
        await query.edit_message_text("‚ùå –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return

    elif callback_data.startswith("year_"):
        # –í—ã–±–æ—Ä –≥–æ–¥–∞
        _, year, date_type = callback_data.split("_")
        await show_month_selection(query, int(year), date_type)

    elif callback_data.startswith("month_"):
        # –í—ã–±–æ—Ä –º–µ—Å—è—Ü–∞
        _, year, month, date_type = callback_data.split("_")
        await show_day_selection(query, int(year), int(month), date_type)

    elif callback_data.startswith("day_"):
        # –í—ã–±–æ—Ä –¥–Ω—è - —Å—Ä–∞–∑—É —Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        _, year, month, day, date_type = callback_data.split("_")
        selected_date = f"{year}-{month:>02s}-{day:>02s}"

        if user_id not in user_selections:
            user_selections[user_id] = {}

        user_selections[user_id]["start_date"] = selected_date
        user_selections[user_id]["end_date"] = date.today().isoformat()

        await generate_and_send_report(query, user_id)


async def show_month_selection(query, year: int, date_type: str):
    """–ü–æ–∫–∞–∑ –≤—ã–±–æ—Ä–∞ –º–µ—Å—è—Ü–∞"""
    months = [
        "–Ø–Ω–≤–∞—Ä—å",
        "–§–µ–≤—Ä–∞–ª—å",
        "–ú–∞—Ä—Ç",
        "–ê–ø—Ä–µ–ª—å",
        "–ú–∞–π",
        "–ò—é–Ω—å",
        "–ò—é–ª—å",
        "–ê–≤–≥—É—Å—Ç",
        "–°–µ–Ω—Ç—è–±—Ä—å",
        "–û–∫—Ç—è–±—Ä—å",
        "–ù–æ—è–±—Ä—å",
        "–î–µ–∫–∞–±—Ä—å",
    ]

    keyboard = []
    row = []
    for i, month in enumerate(months, 1):
        row.append(
            InlineKeyboardButton(
                month, callback_data=f"month_{year}_{i:02d}_{date_type}"
            )
        )
        if len(row) == 3:
            keyboard.append(row)
            row = []
    if row:
        keyboard.append(row)

    keyboard.extend(
        [
            [
                InlineKeyboardButton(
                    "‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –≥–æ–¥–∞", callback_data="report_start"
                )
            ],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="report_cancel")],
        ]
    )

    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        f"üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü –¥–ª—è {year} –≥–æ–¥–∞:", reply_markup=reply_markup
    )


async def show_day_selection(query, year: int, month: int, date_type: str):
    """–ü–æ–∫–∞–∑ –≤—ã–±–æ—Ä–∞ –¥–Ω—è"""
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤ –º–µ—Å—è—Ü–µ
    if month == 12:
        next_month = 1
        next_year = year + 1
    else:
        next_month = month + 1
        next_year = year

    first_day = date(year, month, 1)
    last_day = date(next_year, next_month, 1) - timedelta(days=1)

    keyboard = []
    row = []

    # –î–æ–±–∞–≤–ª—è–µ–º –¥–Ω–∏
    for day in range(1, last_day.day + 1):
        row.append(
            InlineKeyboardButton(
                str(day), callback_data=f"day_{year}_{month:02d}_{day:02d}_{date_type}"
            )
        )
        if len(row) == 7:
            keyboard.append(row)
            row = []
    if row:
        keyboard.append(row)

    keyboard.extend(
        [
            [
                InlineKeyboardButton(
                    "‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –º–µ—Å—è—Ü–∞", callback_data=f"year_{year}_{date_type}"
                )
            ],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="report_cancel")],
        ]
    )

    reply_markup = InlineKeyboardMarkup(keyboard)
    month_name = [
        "–Ø–Ω–≤–∞—Ä—å",
        "–§–µ–≤—Ä–∞–ª—å",
        "–ú–∞—Ä—Ç",
        "–ê–ø—Ä–µ–ª—å",
        "–ú–∞–π",
        "–ò—é–Ω—å",
        "–ò—é–ª—å",
        "–ê–≤–≥—É—Å—Ç",
        "–°–µ–Ω—Ç—è–±—Ä—å",
        "–û–∫—Ç—è–±—Ä—å",
        "–ù–æ—è–±—Ä—å",
        "–î–µ–∫–∞–±—Ä—å",
    ][month - 1]

    await query.edit_message_text(
        f"üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å ({month_name} {year}):", reply_markup=reply_markup
    )


async def generate_and_send_report(query, user_id: int):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞"""
    if user_id not in user_selections or not user_selections[user_id].get("start_date"):
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –¥–∞—Ç–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞")
        return

    start_date = user_selections[user_id]["start_date"]
    end_date = user_selections[user_id]["end_date"]

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–µ—Ä–∏–æ–¥
    period_data = db.get_work_period(user_id, start_date, end_date)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    report = generate_report(period_data, start_date, end_date)

    # –û—á–∏—â–∞–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in user_selections:
        del user_selections[user_id]

    await query.edit_message_text(report)


def generate_report(period_data: Dict, start_date: str, end_date: str) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    if not period_data["work_days"]:
        return f"üìä –ó–∞ –ø–µ—Ä–∏–æ–¥ —Å {format_date(start_date)} –ø–æ {format_date(end_date)} –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."

    report_lines = [
        f"üìä *–û–¢–ß–ï–¢ –∑–∞ –ø–µ—Ä–∏–æ–¥:* {format_date(start_date)} - {format_date(end_date)}\n"
    ]
    total_actual_hours = 0
    total_work_hours = 0
    days_with_data = 0

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏—è –ø–æ –¥–∞—Ç–∞–º
    actions_by_date = {}
    for action_date, action_desc in period_data["tasks"]:
        if action_date not in actions_by_date:
            actions_by_date[action_date] = []
        actions_by_date[action_date].append(action_desc)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –ø–æ –¥–Ω—è–º
    for work_day in period_data["work_days"]:
        day_date, start_time, end_time = work_day

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –∏ –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü –¥–Ω—è
        if start_time and end_time and start_time != end_time:
            actual_hours, work_hours_with_lunch = calculate_work_hours(
                start_time, end_time
            )
            total_actual_hours += actual_hours
            total_work_hours += work_hours_with_lunch
            days_with_data += 1

            report_lines.append(f"\nüìÖ *{format_date(day_date)}*")
            report_lines.append(f"üïê –í—Ä–µ–º—è: {start_time} - {end_time}")
            report_lines.append(f"‚è± –§–∞–∫—Ç–∏—á–µ—Å–∫–∏: {actual_hours:.1f} —á")
            report_lines.append(f"üçΩ –° —É—á–µ—Ç–æ–º –æ–±–µ–¥–∞: {work_hours_with_lunch:.1f} —á")

            # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –∑–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å
            if day_date in actions_by_date:
                report_lines.append("‚úÖ *–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:*")
                for i, action in enumerate(actions_by_date[day_date], 1):
                    report_lines.append(f"  {i}. {action}")
            else:
                report_lines.append("‚ùå –î–µ–π—Å—Ç–≤–∏—è –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã")

    if days_with_data == 0:
        return f"üìä –ó–∞ –ø–µ—Ä–∏–æ–¥ —Å {format_date(start_date)} –ø–æ {format_date(end_date)} –Ω–µ—Ç –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞–±–æ—á–∏—Ö –¥–Ω—è—Ö."

    report_lines.append(f"\nüìà *–ò–¢–û–ì–û –∑–∞ {days_with_data} –¥–Ω–µ–π:*")
    report_lines.append(f"‚è± –§–∞–∫—Ç–∏—á–µ—Å–∫–∏: {total_actual_hours:.1f} —á–∞—Å–æ–≤")
    report_lines.append(f"üçΩ –° —É—á–µ—Ç–æ–º –æ–±–µ–¥–∞: {total_work_hours:.1f} —á–∞—Å–æ–≤")

    return "\n".join(report_lines)


def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    application = Application.builder().token(BOT_TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
    application.add_handler(
        MessageHandler(filters.Regex("üü¢ –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è"), start_work_day)
    )
    application.add_handler(
        MessageHandler(filters.Regex("üî¥ –ö–æ–Ω–µ—Ü —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è"), end_work_day)
    )
    application.add_handler(MessageHandler(filters.Regex("üìä –û—Ç—á–µ—Ç"), report_start))
    application.add_handler(
        MessageHandler(filters.Regex("üìù –î–æ–±–∞–≤–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ"), add_action_start)
    )
    application.add_handler(MessageHandler(filters.Regex("üìÖ –°–µ–≥–æ–¥–Ω—è"), today_info))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π (–ª—é–±–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
    application.add_handler(
        MessageHandler(filters.TEXT & ~filters.COMMAND, add_action_complete)
    )

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏ –≤—Ä–µ–º–µ–Ω–∏
    application.add_handler(
        CallbackQueryHandler(
            handle_overwrite_callback, pattern="^overwrite_|^cancel_overwrite"
        )
    )

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline –∫–Ω–æ–ø–æ–∫ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
    application.add_handler(
        CallbackQueryHandler(
            handle_report_callback, pattern="^report_|^year_|^month_|^day_|^quick_"
        )
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("today", today_info))
    application.add_handler(CommandHandler("report", report_start))
    application.add_handler(CommandHandler("reset_today", reset_today))
    application.add_handler(CommandHandler("add_action", add_action_start))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()


if __name__ == "__main__":
    main()


def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –Ω–∞ Railway"""
    try:
        application = Application.builder().token(BOT_TOKEN).build()

        # –î–æ–±–∞–≤—å—Ç–µ –≤—Å–µ –≤–∞—à–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º –∫–æ–¥–µ
        application.add_handler(
            MessageHandler(filters.Regex("üü¢ –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è"), start_work_day)
        )
        application.add_handler(
            MessageHandler(filters.Regex("üî¥ –ö–æ–Ω–µ—Ü —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è"), end_work_day)
        )
        application.add_handler(MessageHandler(filters.Regex("üìä –û—Ç—á–µ—Ç"), report_start))
        application.add_handler(
            MessageHandler(filters.Regex("üìù –î–æ–±–∞–≤–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ"), add_action_start)
        )
        application.add_handler(MessageHandler(filters.Regex("üìÖ –°–µ–≥–æ–¥–Ω—è"), today_info))
        application.add_handler(
            MessageHandler(filters.TEXT & ~filters.COMMAND, add_action_complete)
        )
        application.add_handler(
            CallbackQueryHandler(
                handle_overwrite_callback, pattern="^overwrite_|^cancel_overwrite"
            )
        )
        application.add_handler(
            CallbackQueryHandler(
                handle_report_callback, pattern="^report_|^year_|^month_|^day_|^quick_"
            )
        )
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("today", today_info))
        application.add_handler(CommandHandler("report", report_start))
        application.add_handler(CommandHandler("reset_today", reset_today))
        application.add_handler(CommandHandler("add_action", add_action_start))

        print("üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞ Railway...")

        # –ù–∞ Railway –∏—Å–ø–æ–ª—å–∑—É–µ–º polling
        application.run_polling()

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        # Railway –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç –ø—Ä–æ—Ü–µ—Å—Å


if __name__ == "__main__":
    main()
